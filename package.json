{
	"name": "databricks-vscode",
	"displayName": "Databricks VSCode",
	"description": "Extension to manage your Databricks workspace and ease local development",
	"version": "1.1.2",
	"publisher": "paiqo",
	"icon": "resources/databricks_extension.png",
	"author": {
		"name": "Gerhard Brueckl"
	},
	"license": "GPL-3.0-or-later",
	"homepage": "https://github.com/paiqo/Databricks-VSCode/blob/master/README.md",
	"repository": {
		"type": "git",
		"url": "https://github.com/paiqo/Databricks-VSCode"
	},
	"bugs": {
		"url": "https://github.com/paiqo/Databricks-VSCode/issues",
		"email": "databricks-vscode@paiqo.com"
	},
	"qna": "https://github.com/paiqo/Databricks-VSCode",
	"enableApiProposals": false,
	"engines": {
		"vscode": "^1.68.0"
	},
	"galleryBanner": {
		"color": "#0ea5ff",
		"theme": "dark"
	},
	"categories": [
		"Azure",
		"Notebooks",
		"Data Science",
		"Other"
	],
	"keywords": [
		"databricks",
		"spark",
		"pyspark",
		"remote",
		"cluster",
		"notebook",
		"azure",
		"AWS",
		"GCP",
		"data",
		"notebookKernelInteractive",
		"notebookKernelJupyterNotebook"
	],
	"extensionDependencies": [
		"RandomFractalsInc.vscode-data-table",
		"databricks.databricks-vscode"
	],
	"activationEvents": [
		"onView:DatabricksConnections",
		"onView:databricksWorkspace",
		"onView:databricksClusters",
		"onView:databricksJobs",
		"onView:databricksFS",
		"onView:databricksSecrets",
		"onView:databricksSql",
		"onView:databricksRepos",
		"onFileSystem:dbfs",
		"onFileSystem:dbws"
	],
	"main": "./dist/extension.js",
	"contributes": {
		"configuration": [
			{
				"name": "Databricks",
				"type": "object",
				"title": "Databricks",
				"properties": {
					"databricks.connectionManager": {
						"type": "string",
						"enum": [
							"VSCode Settings",
							"Databricks CLI Profiles"
						],
						"default": "VSCode Settings",
						"enumDescriptions": [
							"All connection information is stored securely in the VSCode Settings (user or workspace).",
							"Connection information is read from the Databricks CLI config file. Databricks CLI has to be configured upfront! Also supports the environment varialbe 'DATABRICKS_CONFIG_FILE'."
						],
						"description": "Defines how connection information is managed and stored",
						"scope": "window"
					},
					"databricks.sensitiveValueStore": {
						"type": "string",
						"enum": [
							"VSCodeSettings",
							"SystemKeyChain",
							"ExternalConfigFile"
						],
						"default": "SystemKeyChain",
						"enumDescriptions": [
							"Databricks Personal Access Token is stored in the VSCode Settings as plain text! There is a potential risk that the PAT gets checked in to source control systems like git!",
							"Databricks Personal Access Token is securely stored in the System Key Chain. Easy Copying/Sharing connections with other users is not possible this way. VSCode only stores a reference to the the Systems KeyChain entry.",
							"(Experimental!) Databricks Personal Access Token is stored in an external Config file. This is useful to manage all your PATs in one place and also easily share them."
						],
						"description": "Defines the default how the VSCode extension for Databricks stores sensitive values like the Databricks Personal Access Token (PAT). Only releveant if the VSCode Connection Manager is used!",
						"scope": "window"
					},
					"databricks.connection.default.exportFormats": {
						"type": "object",
						"default": {
							"Scala": ".scala",
							"Python": ".ipynb",
							"SQL": ".sql",
							"R": ".r"
						},
						"description": "(Optional) The different file extension used when downloading notebooks from Databricks.",
						"scope": "window",
						"properties": {
							"Scala": {
								"type": "string",
								"enum": [
									".scala"
								],
								"description": "The file extension used when downloading Scala notebooks from Databricks."
							},
							"Python": {
								"type": "string",
								"enum": [
									".py",
									".ipynb"
								],
								"description": "The file extension used when downloading Python notebooks from Databricks."
							},
							"SQL": {
								"type": "string",
								"enum": [
									".sql"
								],
								"description": "The file extension used when downloading SQL notebooks from Databricks."
							},
							"R": {
								"type": "string",
								"enum": [
									".r",
									".Rmd"
								],
								"description": "The file extension used when downloading R notebooks from Databricks."
							}
						}
					},
					"databricks.connection.default.displayName": {
						"type": "string",
						"description": "(Mandatory) Name shown in the Connection list of the Databricks VSCode extension. Must be unique across all VSCode workspaces to avoid conflicts!",
						"scope": "window",
						"examples": [
							"my Connection",
							"DEV",
							"TEST"
						]
					},
					"databricks.connection.default.apiRootUrl": {
						"type": "string",
						"description": "(Mandatory) Root URL of the Databricks API. Azure: https://westeurope.azuredatabricks.net - AWS:   https://abc-12345-xaz.cloud.databricks.com",
						"scope": "window",
						"examples": [
							"https://westeurope.azuredatabricks.net",
							"https://abc-12345-xaz.cloud.databricks.com"
						],
						"format": "hostname"
					},
					"databricks.connection.default.personalAccessToken": {
						"type": "string",
						"description": "(Mandatory) The Personal Access Token (PAT) used to access the Databricks API.",
						"scope": "window",
						"examples": [
							"dapi0123456789abcdef0123456789abcdef"
						]
					},
					"databricks.connection.default.personalAccessTokenSecure": {
						"type": "object",
						"description": "(Optional) Reference to a secure store for the Personal Access Token.",
						"scope": "window",
						"maxProperties": 1,
						"properties": {
							"keyChainSettingName": {
								"type": "string",
								"description": "A unique identifier which is used by KeyTar to store this connection's access token securely.",
								"scope": "window"
							},
							"databricksCLIProfileName": {
								"type": "string",
								"description": "The name of a profile in the Databricks CLI config under ~/.databrickscfg",
								"scope": "window"
							}
						}
					},
					"databricks.connection.default.localSyncFolder": {
						"type": "string",
						"description": "(Mandatory) A local path where files (notebooks) that are downloaded from Databricks should be stored. This folder can then be integrated in your GIT repository. \nExamples: \nWindows - C:\\mySyncFolder \nLinux/Unix - /home/myUser/mySyncFolder \nmacOS - myUser/mySyncFolder  (Please do not use leading / on macOS!)",
						"scope": "window",
						"examples": [
							"Windows: C:\\mySyncFolder",
							"Linux/Unix: /home/myUser/mySyncFolder",
							"macOS: myUser/mySyncFolder  (Please do not use leading / on macOS!)"
						]
					},
					"databricks.connection.default.localSyncSubfolders": {
						"type": "object",
						"default": {
							"Workspace": "Workspace",
							"Clusters": "Clusters",
							"DBFS": "DBFS",
							"Jobs": "Jobs"
						},
						"description": "(Optional) Can be used to specify different sub-paths for the items that can be downloaded from Databricks.",
						"scope": "window",
						"properties": {
							"Workspace": {
								"type": "string",
								"description": "The subfolder where to store downloaded notebooks."
							},
							"Clusters": {
								"type": "string",
								"description": "The subfolder where to store downloaded cluster definitions."
							},
							"DBFS": {
								"type": "string",
								"description": "The subfolder where to store downloaded DBFS items."
							},
							"Jobs": {
								"type": "string",
								"description": "The subfolder where to store downloaded job and job-run defintions."
							}
						}
					},
					"databricks.connection.default.useCodeCells": {
						"type": "boolean",
						"description": "If true, Code Cell tags (# %%) will be added when downloading raw source files.",
						"scope": "window",
						"default": true
					},
					"databricks.connections": {
						"type": "array",
						"description": "An array of objects where each object represents a Databricks Connection containing the same settings as defined for databricks.connection.default.* ",
						"items": {
							"type": "object",
							"properties": {
								"exportFormats": {
									"type": "object",
									"default": {
										"Scala": ".scala",
										"Python": ".ipynb",
										"SQL": ".sql",
										"R": ".r"
									},
									"description": "(Optional) The different file extension used when downloading notebooks from Databricks.",
									"scope": "window",
									"properties": {
										"Scala": {
											"type": "string",
											"enum": [
												".scala"
											],
											"description": "The file extension used when downloading Scala notebooks from Databricks."
										},
										"Python": {
											"type": "string",
											"enum": [
												".py",
												".ipynb"
											],
											"description": "The file extension used when downloading Python notebooks from Databricks."
										},
										"SQL": {
											"type": "string",
											"enum": [
												".sql"
											],
											"description": "The file extension used when downloading SQL notebooks from Databricks."
										},
										"R": {
											"type": "string",
											"enum": [
												".r",
												".Rmd"
											],
											"description": "The file extension used when downloading R notebooks from Databricks."
										}
									}
								},
								"displayName": {
									"type": "string",
									"default": "my Databricks workspace",
									"description": "Name shown in the Connection list of the Databricks VSCode extension. . Must be unique across all VSCode workspaces to avoid conflicts!",
									"scope": "window"
								},
								"apiRootUrl": {
									"type": "string",
									"default": "https://westeurope.azuredatabricks.net",
									"description": "Root URL of the Databricks API. Azure: https://westeurope.azuredatabricks.net - AWS:   https://abc-12345-xaz.cloud.databricks.com",
									"scope": "window"
								},
								"personalAccessToken": {
									"type": "string",
									"default": "dapi123456789abcdef123456789abcdef",
									"description": "The Personal Access Token (PAT) used to access the Databricks API.",
									"scope": "window"
								},
								"personalAccessTokenSecure": {
									"type": "object",
									"description": "(Optional) Reference to a secure store for the Personal Access Token.",
									"scope": "window",
									"properties": {
										"keyChainSettingName": {
											"type": "string",
											"description": "A unique identifier which is used by KeyTar to store this connection's access token securely.",
											"scope": "window"
										},
										"databricksCLIProfileName": {
											"type": "string",
											"description": "The name of a profile in the Databricks CLI config under ~/.databrickscfg",
											"scope": "window"
										}
									}
								},
								"localSyncFolder": {
									"type": "string",
									"default": "C:\\Databricks_sync",
									"description": "A local path where files (notebooks) that are downloaded from Databricks should be stored. This folder can then be integrated in your GIT repository",
									"scope": "window"
								},
								"localSyncSubfolders": {
									"type": "object",
									"default": {
										"Workspace": "Workspace",
										"Clusters": "Clusters",
										"DBFS": "DBFS",
										"Jobs": "Jobs"
									},
									"description": "(Optional) Can be used to specify different sub-paths for the items that can be downloaded from Databricks.",
									"scope": "window",
									"properties": {
										"Workspace": {
											"type": "string",
											"description": "The subfolder where to store downloaded notebooks."
										},
										"Clusters": {
											"type": "string",
											"description": "The subfolder where to store downloaded cluster definitions."
										},
										"DBFS": {
											"type": "string",
											"description": "The subfolder where to store downloaded DBFS items."
										},
										"Jobs": {
											"type": "string",
											"description": "The subfolder where to store downloaded job and job-run defintions."
										}
									}
								},
								"useCodeCells": {
									"type": "boolean",
									"default": false,
									"description": "If true, Code Cell tags (# %%) will be added when downloading raw source files.",
									"scope": "window"
								}
							}
						},
						"scope": "window",
						"default": []
					},
					"databricks.lastActiveConnection": {
						"type": "string",
						"description": "(Optional) The displayName of the Connection that was used in the last session.",
						"scope": "window"
					}
				}
			}
		],
		"views": {
			"databricksBar": [
				{
					"id": "DatabricksConnections",
					"name": "Connections"
				},
				{
					"id": "databricksWorkspace",
					"name": "Workspace"
				},
				{
					"id": "databricksClusters",
					"name": "Clusters"
				},
				{
					"id": "databricksJobs",
					"name": "Jobs"
				},
				{
					"id": "databricksFS",
					"name": "DBFS"
				},
				{
					"id": "databricksSecrets",
					"name": "Secrets"
				},
				{
					"id": "databricksSQL",
					"name": "SQL"
				},
				{
					"id": "databricksRepos",
					"name": "Repos"
				}
			]
		},
		"commands": [
			{
				"command": "databricksConnections.refresh",
				"title": "Refresh",
				"icon": "$(refresh)"
			},
			{
				"command": "DatabricksConnections.add",
				"title": "Add",
				"icon": "$(add)"
			},
			{
				"command": "DatabricksConnectionItem.activate",
				"title": "Activate",
				"icon": {
					"light": "resources/light/connected.png",
					"dark": "resources/dark/connected.png"
				}
			},
			{
				"command": "databricksWorkspace.refresh",
				"title": "Refresh",
				"icon": "$(refresh)"
			},
			{
				"command": "databricksWorkspace.download",
				"title": "Download",
				"icon": "$(cloud-download)"
			},
			{
				"command": "databricksWorkspace.upload",
				"title": "Upload",
				"icon": "$(cloud-upload)"
			},
			{
				"command": "databricksWorkspace.addToWorkspace",
				"title": "Add Databricks to VSCode workspace",
				"icon": "$(symbol-class)"
			},
			{
				"command": "databricksWorkspaceItem.click",
				"title": "Open File"
			},
			{
				"command": "databricksWorkspaceItem.download",
				"title": "Download",
				"icon": "$(cloud-download)"
			},
			{
				"command": "databricksWorkspaceItem.upload",
				"title": "Upload",
				"icon": "$(cloud-upload)"
			},
			{
				"command": "databricksWorkspaceItem.compare",
				"title": "Compare",
				"icon": "$(compare-changes)"
			},
			{
				"command": "databricksWorkspaceItem.delete",
				"title": "Delete",
				"icon": "$(remove-close)"
			},
			{
				"command": "databricksWorkspaceItem.copyPath",
				"title": "Copy Path"
			},
			{
				"command": "databricksClusters.refresh",
				"title": "Refresh",
				"icon": "$(refresh)"
			},
			{
				"command": "databricksClusters.add",
				"title": "Add",
				"icon": "$(add)"
			},
			{
				"command": "databricksClusterItem.click",
				"title": "Open File"
			},
			{
				"command": "databricksClusterItem.start",
				"title": "Start",
				"icon": {
					"light": "resources/light/start.png",
					"dark": "resources/dark/start.png"
				}
			},
			{
				"command": "databricksClusterItem.stop",
				"title": "Stop",
				"icon": {
					"light": "resources/light/stop.png",
					"dark": "resources/dark/stop.png"
				}
			},
			{
				"command": "databricksClusterItem.showDefinition",
				"title": "JSON Definition",
				"icon": "$(json)"
			},
			{
				"command": "databricksClusterItem.delete",
				"title": "Delete",
				"icon": "$(remove-close)"
			},
			{
				"command": "databricksClusterItem.useForSQL",
				"title": "Use for SQL Browser",
				"icon": {
					"light": "resources/light/stop.png",
					"dark": "resources/dark/stop.png"
				}
			},
			{
				"command": "databricksClusterItem.createKernel",
				"title": "Create Databricks Cluster Kernel",
				"shortTitle": "Create Databricks Kernel"
			},
			{
				"command": "databricksClusterItem.restartKernel",
				"title": "Restart Databricks Cluster Kernel",
				"shortTitle": "Restart Databricks Kernel"
			},
			{
				"command": "databricksJobs.refresh",
				"title": "Refresh",
				"icon": "$(refresh)"
			},
			{
				"command": "databricksJobItem.showDefinition",
				"title": "JSON Definition",
				"icon": "$(json)"
			},
			{
				"command": "databricksJobItem.click",
				"title": "Open File"
			},
			{
				"command": "databricksJobItem.start",
				"title": "Start",
				"icon": {
					"light": "resources/light/start.png",
					"dark": "resources/dark/start.png"
				}
			},
			{
				"command": "databricksJobItem.stop",
				"title": "Stop",
				"icon": {
					"light": "resources/light/stop.png",
					"dark": "resources/dark/stop.png"
				}
			},
			{
				"command": "databricksJobItem.openBrowser",
				"title": "Open Browser",
				"icon": "$(globe)"
			},
			{
				"command": "databricksFS.addToWorkspace",
				"title": "Add DBFS to VSCode workspace",
				"icon": "$(symbol-class)"
			},
			{
				"command": "databricksFS.refresh",
				"title": "Refresh",
				"icon": "$(refresh)"
			},
			{
				"command": "databricksFS.addFile",
				"title": "Add",
				"icon": "$(new-file)"
			},
			{
				"command": "databricksFS.addDirectory",
				"title": "Add",
				"icon": "$(file-directory-create)"
			},
			{
				"command": "databricksFSItem.download",
				"title": "Download",
				"icon": "$(cloud-download)"
			},
			{
				"command": "databricksFSItem.upload",
				"title": "Upload",
				"icon": "$(cloud-upload)"
			},
			{
				"command": "databricksFSItem.click",
				"title": "Preview File"
			},
			{
				"command": "databricksFSItem.addFile",
				"title": "Add",
				"icon": "$(new-file)"
			},
			{
				"command": "databricksFSItem.addDirectory",
				"title": "Add Directory",
				"icon": "$(file-directory-create)"
			},
			{
				"command": "databricksFSItem.delete",
				"title": "Delete",
				"icon": "$(remove-close)"
			},
			{
				"command": "databricksFSItem.copyPath",
				"title": "Copy Path"
			},
			{
				"command": "databricksSecrets.refresh",
				"title": "Refresh",
				"icon": "$(refresh)"
			},
			{
				"command": "databricksSecrets.addSecretScope",
				"title": "Add Secret Scope",
				"icon": "$(add)"
			},
			{
				"command": "databricksSecretScope.delete",
				"title": "Delete",
				"icon": "$(remove-close)"
			},
			{
				"command": "databricksSecretScope.addSecret",
				"title": "Add Secret",
				"icon": "$(add)"
			},
			{
				"command": "databricksSecret.update",
				"title": "Update",
				"icon": "$(pencil)"
			},
			{
				"command": "databricksSecret.delete",
				"title": "Delete",
				"icon": "$(remove-close)"
			},
			{
				"command": "databricksSQL.refresh",
				"title": "Refresh",
				"icon": "$(refresh)"
			},
			{
				"command": "databricksSQLTable.showDefinition",
				"title": "Show Definition",
				"icon": "$(json)"
			},
			{
				"command": "databricksRepos.refresh",
				"title": "Refresh",
				"icon": "$(refresh)"
			},
			{
				"command": "databricksRepo.pull",
				"title": "Pull",
				"icon": "$(repo-pull)"
			},
			{
				"command": "databricksRepo.checkOut",
				"title": "Check-Out",
				"icon": "$(repo-clone)"
			},
			{
				"command": "databricksRepo.delete",
				"title": "Delete",
				"icon": "$(remove-close)"
			}
		],
		"menus": {
			"view/title": [
				{
					"command": "databricksConnections.refresh",
					"when": "view == DatabricksConnections",
					"group": "navigation"
				},
				{
					"command": "DatabricksConnections.add",
					"when": "view == DatabricksConnections",
					"group": "navigation"
				},
				{
					"command": "databricksWorkspace.refresh",
					"when": "view == databricksWorkspace",
					"group": "navigation@2"
				},
				{
					"command": "databricksWorkspace.download",
					"when": "view == databricksWorkspace",
					"group": "navigation@1"
				},
				{
					"command": "databricksWorkspace.upload",
					"when": "view == databricksWorkspace",
					"group": "navigation@1"
				},
				{
					"command": "databricksWorkspace.addToWorkspace",
					"when": "view == databricksWorkspace",
					"group": "navigation"
				},
				{
					"command": "databricksClusters.refresh",
					"when": "view == databricksClusters",
					"group": "navigation"
				},
				{
					"command": "databricksClusters.add",
					"when": "view == databricksClusters",
					"group": "navigation"
				},
				{
					"command": "databricksJobs.refresh",
					"when": "view == databricksJobs",
					"group": "navigation"
				},
				{
					"command": "databricksFS.refresh",
					"when": "view == databricksFS",
					"group": "navigation"
				},
				{
					"command": "databricksFS.addFile",
					"when": "view == databricksFS",
					"group": "navigation"
				},
				{
					"command": "databricksFS.addDirectory",
					"when": "view == databricksFS",
					"group": "navigation"
				},
				{
					"command": "databricksFS.addToWorkspace",
					"when": "view == databricksFS",
					"group": "navigation"
				},
				{
					"command": "databricksSecrets.refresh",
					"when": "view == databricksSecrets",
					"group": "navigation"
				},
				{
					"command": "databricksSecrets.addSecretScope",
					"when": "view == databricksSecrets",
					"group": "navigation"
				},
				{
					"command": "databricksSQL.refresh",
					"when": "view == databricksSQL",
					"group": "navigation"
				},
				{
					"command": "databricksRepos.refresh",
					"when": "view == databricksRepos",
					"group": "navigation"
				}
			],
			"view/item/context": [
				{
					"command": "DatabricksConnectionItem.activate",
					"when": "view == DatabricksConnections && viewItem == INACTIVE",
					"group": "inline"
				},
				{
					"command": "databricksWorkspaceItem.download",
					"when": "view == databricksWorkspace && viewItem =~ /.*,DOWNLOAD,.*/",
					"group": "inline@1"
				},
				{
					"command": "databricksWorkspaceItem.upload",
					"when": "view == databricksWorkspace && viewItem =~ /.*,UPLOAD,.*/",
					"group": "inline@1"
				},
				{
					"command": "databricksWorkspaceItem.compare",
					"when": "view == databricksWorkspace && viewItem =~ /.*,COMPARE,.*/",
					"group": "inline@1"
				},
				{
					"command": "databricksWorkspaceItem.delete",
					"when": "view == databricksWorkspace",
					"group": "inline@99"
				},
				{
					"command": "databricksWorkspaceItem.copyPath",
					"when": "view == databricksWorkspace"
				},
				{
					"command": "databricksClusterItem.start",
					"when": "view == databricksClusters && viewItem =~ /.*,STOPPED,.*/",
					"group": "inline"
				},
				{
					"command": "databricksClusterItem.stop",
					"when": "view == databricksClusters && viewItem =~ /.*,STARTED,.*/",
					"group": "inline"
				},
				{
					"command": "databricksClusterItem.showDefinition",
					"when": "view == databricksClusters",
					"group": "inline"
				},
				{
					"command": "databricksClusterItem.delete",
					"when": "view == databricksClusters",
					"group": "inline@99"
				},
				{
					"command": "databricksClusterItem.useForSQL",
					"when": "view == databricksClusters && viewItem =~ /.*,STARTED,.*/"
				},
				{
					"command": "databricksClusterItem.createKernel",
					"when": "view == databricksClusters && viewItem =~ /.*,STARTED,.*/ && viewItem =~ /.*,NOKERNEL,.*/"
				},
				{
					"command": "databricksClusterItem.restartKernel",
					"when": "view == databricksClusters && viewItem =~ /.*,STARTED,.*/ && viewItem =~ /.*,KERNEL,.*/"
				},
				{
					"command": "databricksJobItem.showDefinition",
					"when": "view == databricksJobs && viewItem == JOB || viewItem == JOB_RUN || viewItem == RUNNING_JOB",
					"group": "inline"
				},
				{
					"command": "databricksJobItem.start",
					"when": "view == databricksJobs  && viewItem == JOB",
					"group": "inline"
				},
				{
					"command": "databricksJobItem.stop",
					"when": "view == databricksJobs  && viewItem == RUNNING_JOB",
					"group": "inline"
				},
				{
					"command": "databricksJobItem.openBrowser",
					"when": "view == databricksJobs && viewItem == JOB || viewItem == JOB_RUN || viewItem == RUNNING_JOB",
					"group": "inline"
				},
				{
					"command": "databricksFSItem.addFile",
					"when": "view == databricksFS && viewItem =~ /.*,ADDFILE,.*/",
					"group": "inline"
				},
				{
					"command": "databricksFSItem.addDirectory",
					"when": "view == databricksFS && viewItem =~ /.*,ADDDIRECTORY,.*/",
					"group": "inline"
				},
				{
					"command": "databricksFSItem.download",
					"when": "view == databricksFS && viewItem =~ /.*,DOWNLOAD,.*/",
					"group": "inline"
				},
				{
					"command": "databricksFSItem.upload",
					"when": "view == databricksFS && viewItem =~ /.*,UPLOAD,.*/",
					"group": "inline"
				},
				{
					"command": "databricksFSItem.delete",
					"when": "view == databricksFS &&  viewItem =~ /.*,DELETE,.*/",
					"group": "inline@99"
				},
				{
					"command": "databricksFSItem.copyPath",
					"when": "view == databricksFS"
				},
				{
					"command": "databricksSecretScope.delete",
					"when": "view == databricksSecrets && viewItem == SCOPE_DATABRICKS",
					"group": "inline@99"
				},
				{
					"command": "databricksSecretScope.addSecret",
					"when": "view == databricksSecrets && viewItem == SCOPE_DATABRICKS",
					"group": "inline"
				},
				{
					"command": "databricksSecret.update",
					"when": "view == databricksSecrets && viewItem == SECRET_DATABRICKS",
					"group": "inline"
				},
				{
					"command": "databricksSecret.delete",
					"when": "view == databricksSecrets && viewItem == SECRET_DATABRICKS",
					"group": "inline@99"
				},
				{
					"command": "databricksSQLTable.showDefinition",
					"when": "view == databricksSQL && viewItem == TABLE",
					"group": "inline"
				},
				{
					"command": "databricksRepo.pull",
					"when": "view == databricksRepos && viewItem == REPOSITORY",
					"group": "inline@1"
				},
				{
					"command": "databricksRepo.checkOut",
					"when": "view == databricksRepos && viewItem == REPOSITORY",
					"group": "inline@2"
				},
				{
					"command": "databricksRepo.delete",
					"when": "view == databricksRepos && viewItem == REPOSITORY",
					"group": "inline@99"
				}
			]
		}
	},
	"scripts": {
		"vscode:prepublish": "npm run package",
		"compile": "webpack",
		"watch": "webpack --watch",
		"package": "webpack --mode production --devtool hidden-source-map",
		"lint": "eslint src --ext ts"
	},
	"devDependencies": {
		"@types/node": "^16.11.7",
		"@types/rimraf": "^2.0.5",
		"@types/vscode": "^1.68.0",
		"@types/glob": "^7.2.0",
		"@types/mocha": "^9.1.1",
		"ts-loader": "^9.3.1",
		"eslint": "^8.19.0",
		"typescript": "^4.7.4",
		"glob": "^8.0.3",
		"mocha": "^10.0.0",
		"webpack": "^5.74.0",
		"webpack-cli": "^4.10.0",
		"@databricks/databricks-vscode-types": "file:../databricks-vscode/packages/databricks-vscode-types",
		"@databricks/databricks-sdk-js": "file:../databricks-vscode/packages/databricks-sdk-js"
	},
	"dependencies": {
		"@angular/common": "^14.0.1",
		"@angular/core": "^14.0.1",
		"axios": "^0.27.2",
		"file-saver": "^2.0.5",
		"follow-redirects": "^1.14.8",
		"ftp": "^0.3.10",
		"https-agent": "^1.0.0",
		"jsonc-parser": "^0.4.2",
		"mkdirp": "^0.5.1",
		"promise.prototype.finally": "^3.1.3",
		"replace-in-file": "^6.3.2",
		"request": "^2.88.2",
		"rimraf": "^2.6.2",
		"rxjs": "^6.6.7",
		"sync-request": "^6.1.0"
	}
}