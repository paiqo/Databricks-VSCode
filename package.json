{
	"name": "databricks-vscode",
	"displayName": "Databricks Power Tools",
	"description": "Run notebooks cell-by-cell, browse and edit your Databricks Workspace, DBFS, Clusters, Jobs, Secrets, Repos and SQL. Supports Azure Databricks, Databricks on AWS and Databricks on GCP.",
	"version": "2.1.0",
	"publisher": "paiqo",
	"icon": "resources/databricks_extension.png",
	"author": {
		"name": "Gerhard Brueckl"
	},
	"license": "GPL-3.0-or-later",
	"homepage": "https://github.com/paiqo/Databricks-VSCode/blob/master/README.md",
	"repository": {
		"type": "git",
		"url": "https://github.com/paiqo/Databricks-VSCode"
	},
	"bugs": {
		"url": "https://github.com/paiqo/Databricks-VSCode/issues",
		"email": "databricks-vscode@paiqo.com"
	},
	"qna": "https://github.com/paiqo/Databricks-VSCode",
	"enableApiProposals": false,
	"engines": {
		"vscode": "^1.68.0"
	},
	"extensionDependencies": [
		"RandomFractalsInc.vscode-data-table"
	],
	"galleryBanner": {
		"color": "#0ea5ff",
		"theme": "dark"
	},
	"categories": [
		"Azure",
		"Notebooks",
		"Data Science",
		"Machine Learning",
		"Other"
	],
	"keywords": [
		"databricks",
		"spark",
		"pyspark",
		"remote",
		"cluster",
		"notebook",
		"azure",
		"AWS",
		"GCP",
		"data",
		"notebookKernelJupyterNotebook"
	],
	"activationEvents": [
		"onFileSystem:dbfs",
		"onFileSystem:dbws",
		"onFileSystem:wsfs"
	],
	"capabilities": {
		"virtualWorkspaces": {
			"supported": "limited",
			"description": "In virtual workspaces, Workspace and DBFS browsers are not supported. Please use `dbfs:/` and `wsfs:/` mount points instead."
		},
		"untrustedWorkspaces": {
			"supported": "limited",
			"description": "Loading connections from your Azure Account will not work in an untrusted workspace!"
		}
	},
	"main": "./dist/node/extension.js",
	"browser": "./dist/web/extension.js",
	"contributes": {
		"configuration": [
			{
				"name": "paiqo.databricks-vscode",
				"type": "object",
				"title": "Databricks Power Tools",
				"properties": {
					"databricks.connectionManager": {
						"type": "string",
						"enum": [
							"Default",
							"VSCode Settings",
							"Databricks CLI Profiles",
							"Azure",
							"Databricks Extension",
							"Manual"
						],
						"default": "Default",
						"enumDescriptions": [
							"The best matching connection manager is selected automatically.",
							"All connection information is stored securely in the VSCode Settings (user or workspace).",
							"Connection information is read from the Databricks CLI config file. Databricks CLI has to be configured upfront! Also supports the environment varialbe 'DATABRICKS_CONFIG_FILE'.",
							"Connection information is loaded from Azure. All Azure Databricks workspaces that you have access to will show up atuomatically in the connection list.",
							"A single connection that is managed by the Databricks Extensions",
							"You are prompted for connection information once you interact with the extension."
						],
						"description": "Defines how connection information is managed and stored.",
						"scope": "window"
					},
					"databricks.sensitiveValueStore": {
						"type": "string",
						"enum": [
							"VSCodeSettings",
							"SystemKeyChain"
						],
						"default": "SystemKeyChain",
						"enumDescriptions": [
							"Databricks Personal Access Token is stored in the VSCode Settings as plain text! There is a potential risk that the PAT gets checked in to source control systems like git!",
							"Databricks Personal Access Token is securely stored in the System Key Chain. Easy Copying/Sharing connections with other users is not possible this way. VSCode only stores a reference to the the Systems KeyChain entry."
						],
						"markdownDescription": "(`VSCode Settings`) Defines the default how the VSCode extension for Databricks stores sensitive values like the Databricks Personal Access Token (PAT). Only releveant if the VSCode Connection Manager is used!",
						"scope": "window"
					},
					"databricks.connection.default.exportFormats": {
						"type": "object",
						"default": {
							"Scala": ".scala",
							"Python": ".ipynb",
							"SQL": ".sql",
							"R": ".r"
						},
						"markdownDescription": "(`VSCode Settings`, Optional) The different file extension used when downloading notebooks from Databricks.",
						"scope": "window",
						"properties": {
							"Scala": {
								"type": "string",
								"enum": [
									".scala"
								],
								"description": "The file extension used when downloading Scala notebooks from Databricks."
							},
							"Python": {
								"type": "string",
								"enum": [
									".py",
									".ipynb"
								],
								"description": "The file extension used when downloading Python notebooks from Databricks."
							},
							"SQL": {
								"type": "string",
								"enum": [
									".sql"
								],
								"description": "The file extension used when downloading SQL notebooks from Databricks."
							},
							"R": {
								"type": "string",
								"enum": [
									".r",
									".Rmd"
								],
								"description": "The file extension used when downloading R notebooks from Databricks."
							}
						}
					},
					"databricks.connection.default.displayName": {
						"type": "string",
						"markdownDescription": "(`VSCode Settings`, Mandatory) Name shown in the Connection list of the Databricks VSCode extension. Must be unique across all VSCode workspaces to avoid conflicts!",
						"scope": "window",
						"examples": [
							"my Connection",
							"DEV",
							"TEST"
						]
					},
					"databricks.connection.default.apiRootUrl": {
						"type": "string",
						"markdownDescription": "(`VSCode Settings`, Mandatory) Root URL of the Databricks API. Azure: https://adb-12345678901234.19.azuredatabricks.net - AWS:   https://abc-12345-xaz.cloud.databricks.com. Please do not provide any path or querystring like `?o=123456`",
						"scope": "window",
						"examples": [
							"https://adb-12345678901234.19.azuredatabricks.net/",
							"https://abc-12345-xaz.cloud.databricks.com"
						]
					},
					"databricks.connection.default.personalAccessToken": {
						"type": "string",
						"markdownDescription": "(`VSCode Settings`, Mandatory) The Personal Access Token (PAT) used to access the Databricks API.",
						"scope": "window",
						"examples": [
							"dapi0123456789abcdef0123456789abcdef"
						]
					},
					"databricks.connection.default.personalAccessTokenSecure": {
						"type": "object",
						"markdownDescription": "(`VSCode Settings`, Optional) Reference to a secure store for the Personal Access Token.",
						"scope": "window",
						"maxProperties": 1,
						"properties": {
							"keyChainSettingName": {
								"type": "string",
								"description": "A unique identifier which is used by KeyTar to store this connection's access token securely.",
								"scope": "window"
							},
							"databricksCLIProfileName": {
								"type": "string",
								"description": "The name of a profile in the Databricks CLI config under ~/.databrickscfg",
								"scope": "window"
							}
						}
					},
					"databricks.connection.default.localSyncFolder": {
						"type": "string",
						"markdownDescription": "(`VSCode Settings`, Mandatory) A local path where files (notebooks) that are downloaded from Databricks should be stored. This folder can then be integrated in your GIT repository. \nExamples: \nWindows - C:\\mySyncFolder \nLinux/Unix - /home/myUser/mySyncFolder \nmacOS - myUser/mySyncFolder  (Please do not use leading / on macOS!)",
						"scope": "window",
						"examples": [
							"Windows: C:\\mySyncFolder",
							"Linux/Unix: /home/myUser/mySyncFolder",
							"macOS: myUser/mySyncFolder  (Please do not use leading / on macOS!)"
						]
					},
					"databricks.connection.default.localSyncSubfolders": {
						"type": "object",
						"default": {
							"Workspace": "Workspace",
							"Clusters": "Clusters",
							"DBFS": "DBFS",
							"Jobs": "Jobs"
						},
						"markdownDescription": "(`VSCode Settings`, Optional) Can be used to specify different sub-paths for the items that can be downloaded from Databricks.",
						"scope": "window",
						"properties": {
							"Workspace": {
								"type": "string",
								"description": "The subfolder where to store downloaded notebooks."
							},
							"Clusters": {
								"type": "string",
								"description": "The subfolder where to store downloaded cluster definitions."
							},
							"DBFS": {
								"type": "string",
								"description": "The subfolder where to store downloaded DBFS items."
							},
							"Jobs": {
								"type": "string",
								"description": "The subfolder where to store downloaded job and job-run defintions."
							}
						}
					},
					"databricks.connections": {
						"type": "array",
						"makrdownDescription": "(`VSCode Settings`) An array of objects where each object represents a Databricks Connection containing the same settings as defined for databricks.connection.default.* ",
						"items": {
							"type": "object",
							"properties": {
								"exportFormats": {
									"type": "object",
									"default": {
										"Scala": ".scala",
										"Python": ".ipynb",
										"SQL": ".sql",
										"R": ".r"
									},
									"description": "(Optional) The different file extension used when downloading notebooks from Databricks.",
									"properties": {
										"Scala": {
											"type": "string",
											"enum": [
												".scala"
											],
											"description": "The file extension used when downloading Scala notebooks from Databricks."
										},
										"Python": {
											"type": "string",
											"enum": [
												".py",
												".ipynb"
											],
											"description": "The file extension used when downloading Python notebooks from Databricks."
										},
										"SQL": {
											"type": "string",
											"enum": [
												".sql"
											],
											"description": "The file extension used when downloading SQL notebooks from Databricks."
										},
										"R": {
											"type": "string",
											"enum": [
												".r",
												".Rmd"
											],
											"description": "The file extension used when downloading R notebooks from Databricks."
										}
									}
								},
								"displayName": {
									"type": "string",
									"default": "my Databricks workspace",
									"description": "Name shown in the Connection list of the Databricks VSCode extension. . Must be unique across all VSCode workspaces to avoid conflicts!"
								},
								"apiRootUrl": {
									"type": "string",
									"description": "(Mandatory) Root URL of the Databricks API. Azure: https://adb-12345678901234.19.azuredatabricks.net - AWS:   https://abc-12345-xaz.cloud.databricks.com. Please do not provide any path or querystring like `?o=123456`",
									"examples": [
										"https://adb-12345678901234.19.azuredatabricks.net/",
										"https://abc-12345-xaz.cloud.databricks.com"
									]
								},
								"personalAccessToken": {
									"type": "string",
									"default": "dapi123456789abcdef123456789abcdef",
									"description": "The Personal Access Token (PAT) used to access the Databricks API."
								},
								"personalAccessTokenSecure": {
									"type": "object",
									"description": "(Optional) Reference to a secure store for the Personal Access Token.",
									"properties": {
										"keyChainSettingName": {
											"type": "string",
											"description": "A unique identifier which is used by KeyTar to store this connection's access token securely."
										},
										"databricksCLIProfileName": {
											"type": "string",
											"description": "The name of a profile in the Databricks CLI config under ~/.databrickscfg"
										}
									}
								},
								"localSyncFolder": {
									"type": "string",
									"default": "C:\\Databricks_sync",
									"description": "A local path where files (notebooks) that are downloaded from Databricks should be stored. This folder can then be integrated in your GIT repository"
								},
								"localSyncSubfolders": {
									"type": "object",
									"default": {
										"Workspace": "Workspace",
										"Clusters": "Clusters",
										"DBFS": "DBFS",
										"Jobs": "Jobs"
									},
									"description": "(Optional) Can be used to specify different sub-paths for the items that can be downloaded from Databricks.",
									"properties": {
										"Workspace": {
											"type": "string",
											"description": "The subfolder where to store downloaded notebooks."
										},
										"Clusters": {
											"type": "string",
											"description": "The subfolder where to store downloaded cluster definitions."
										},
										"DBFS": {
											"type": "string",
											"description": "The subfolder where to store downloaded DBFS items."
										},
										"Jobs": {
											"type": "string",
											"description": "The subfolder where to store downloaded job and job-run defintions."
										}
									}
								}
							}
						},
						"scope": "window",
						"default": []
					},
					"databricks.lastActiveConnection": {
						"type": "string",
						"description": "The displayName of the Connection that was used in the last session.",
						"scope": "window"
					},
					"databricks.azure.tenantId": {
						"type": "string",
						"markdownDescription": "(`Azure`, Optional) To connect to Azure Databricks Workspaces outside of your home-tenant.",
						"scope": "window"
					},
					"databricks.azure.subscriptionIds": {
						"type": "array",
						"markdownDescription": "(`Azure`, Optional) A list of Azure Subscription IDs (GUIDs) from which the Databricks Workspaces are loaded. If not specified, all accessible subscriptions are searched.",
						"scope": "window",
						"items": {
							"type": "string",
							"description": "An Azure Subscription ID (GUID).",
							"examples": [
								"30373b46-5f05-1234-9876-d5560532fc32"
							]
						}
					},
					"databricks.azure.workspaces": {
						"type": "array",
						"markdownDescription": "(`Azure`, Optional) A list of Azure Resource IDs to load directly without browsing the tenant first.",
						"scope": "window",
						"items": {
							"type": "object",
							"properties": {
								"displayName": {
									"type": "string",
									"default": "my Databricks workspace",
									"description": "Name shown in the Connection list of the Databricks VSCode extension. Must be unique across all VSCode workspaces to avoid conflicts!"
								},
								"resourceId": {
									"type": "string",
									"description": "The Azure Resource ID (GUID) of the Databricks Workspace"
								},
								"localSyncFolder": {
									"type": "string",
									"default": "C:\\Databricks_sync",
									"description": "A local path where files (notebooks) that are downloaded from Databricks should be stored. This folder can then be integrated in your GIT repository"
								}
							},
							"description": "An Azure Resource ID (GUID)."
						}
					}
				}
			}
		],
		"viewsContainers": {
			"activitybar": [
				{
					"id": "databricksPowerTools",
					"title": "Databricks Power Tools",
					"icon": "resources/databricks_sidebar.png"
				}
			]
		},
		"views": {
			"databricksPowerTools": [
				{
					"id": "databricksConnections",
					"name": "Connections",
					"type": "tree",
					"initialSize": 25,
					"when": "!paiqo.databricks.hideConnectionManager"
				},
				{
					"id": "databricksWorkspace",
					"name": "Workspace",
					"type": "tree",
					"when": "!virtualWorkspace && !paiqo.databricks.isInBrowser"
				},
				{
					"id": "databricksClusters",
					"name": "Clusters",
					"type": "tree"
				},
				{
					"id": "databricksJobs",
					"name": "Jobs",
					"type": "tree"
				},
				{
					"id": "databricksFS",
					"name": "DBFS",
					"type": "tree",
					"when": "!virtualWorkspace && !paiqo.databricks.isInBrowser"
				},
				{
					"id": "databricksSecrets",
					"name": "Secrets",
					"type": "tree"
				},
				{
					"id": "databricksSQL",
					"name": "SQL",
					"type": "tree"
				},
				{
					"id": "databricksRepos",
					"name": "Repos",
					"type": "tree"
				}
			]
		},
		"viewsWelcome": [
			{
				"view": "databricksSQL",
				"contents": "Please select a cluster first"
			}
		],
		"commands": [
			{
				"command": "databricksConnections.refresh",
				"title": "Refresh",
				"category": "Databricks Power Tools",
				"icon": "$(refresh)"
			},
			{
				"command": "databricksConnections.add",
				"title": "Add",
				"category": "Databricks Power Tools",
				"icon": "$(add)",
				"enablement": "virtualWorkspace"
			},
			{
				"command": "databricksConnections.settings",
				"title": "Settings",
				"category": "Databricks Power Tools",
				"icon": "$(gear)",
				"enablement": "!virtualWorkspace"
			},
			{
				"command": "databricksConnectionItem.activate",
				"title": "Activate",
				"category": "Databricks Power Tools",
				"icon": {
					"light": "resources/light/connected.png",
					"dark": "resources/dark/connected.png"
				}
			},
			{
				"command": "databricksWorkspace.refresh",
				"title": "Refresh",
				"category": "Databricks Power Tools",
				"icon": "$(refresh)"
			},
			{
				"command": "databricksWorkspace.download",
				"title": "Download",
				"category": "Databricks Power Tools",
				"icon": "$(cloud-download)"
			},
			{
				"command": "databricksWorkspace.upload",
				"title": "Upload",
				"category": "Databricks Power Tools",
				"icon": "$(cloud-upload)"
			},
			{
				"command": "databricksWorkspace.addToWorkspace",
				"title": "Add Databricks Workspace to VSCode workspace",
				"category": "Databricks Power Tools",
				"icon": "$(symbol-class)"
			},
			{
				"command": "databricksWorkspaceItem.click",
				"title": "Open File",
				"category": "Databricks Power Tools"
			},
			{
				"command": "databricksWorkspaceItem.download",
				"title": "Download",
				"category": "Databricks Power Tools",
				"icon": "$(cloud-download)"
			},
			{
				"command": "databricksWorkspaceItem.upload",
				"title": "Upload",
				"category": "Databricks Power Tools",
				"icon": "$(cloud-upload)"
			},
			{
				"command": "databricksWorkspaceItem.compare",
				"title": "Compare",
				"category": "Databricks Power Tools",
				"icon": "$(compare-changes)"
			},
			{
				"command": "databricksWorkspaceItem.delete",
				"title": "Delete",
				"category": "Databricks Power Tools",
				"icon": "$(remove-close)"
			},
			{
				"command": "databricksWorkspaceItem.copyPath",
				"title": "Copy Path",
				"category": "Databricks Power Tools"
			},
			{
				"command": "databricksWorkspaceItem.openExplorer",
				"title": "Open Explorer",
				"category": "Databricks Power Tools"
			},
			{
				"command": "databricksClusters.refresh",
				"title": "Refresh",
				"category": "Databricks Power Tools",
				"icon": "$(refresh)"
			},
			{
				"command": "databricksClusters.add",
				"title": "Add",
				"category": "Databricks Power Tools",
				"icon": "$(add)"
			},
			{
				"command": "databricksClusterItem.click",
				"title": "Open File",
				"category": "Databricks Power Tools"
			},
			{
				"command": "databricksClusterItem.start",
				"title": "Start",
				"category": "Databricks Power Tools",
				"icon": {
					"light": "resources/light/start.png",
					"dark": "resources/dark/start.png"
				}
			},
			{
				"command": "databricksClusterItem.stop",
				"title": "Stop",
				"category": "Databricks Power Tools",
				"icon": {
					"light": "resources/light/stop.png",
					"dark": "resources/dark/stop.png"
				}
			},
			{
				"command": "databricksClusterItem.showDefinition",
				"title": "JSON Definition",
				"category": "Databricks Power Tools",
				"icon": "$(json)"
			},
			{
				"command": "databricksClusterItem.delete",
				"title": "Delete",
				"category": "Databricks Power Tools",
				"icon": "$(remove-close)"
			},
			{
				"command": "databricksClusterItem.pin",
				"title": "Pin",
				"category": "Databricks Power Tools",
				"icon": "$(pin)"
			},
			{
				"command": "databricksClusterItem.unpin",
				"title": "Unpin",
				"category": "Databricks Power Tools",
				"icon": "$(pinned)"
			},
			{
				"command": "databricksClusterItem.useForSQL",
				"title": "Use for SQL Browser",
				"category": "Databricks Power Tools",
				"icon": {
					"light": "resources/light/stop.png",
					"dark": "resources/dark/stop.png"
				},
				"enablement": "paiqo.databricks.connectionManager != 'Databricks Extension'"
			},
			{
				"command": "databricksClusterItem.attachCluster",
				"title": "Attach cluster",
				"category": "Databricks Power Tools",
				"icon": "$(plug)",
				"enablement": "paiqo.databricks.connectionManager == 'Databricks Extension'"
			},
			{
				"command": "databricksClusterItem.createKernel",
				"title": "Create Databricks Cluster Kernel",
				"shortTitle": "Create Databricks Kernel",
				"category": "Databricks Power Tools"
			},
			{
				"command": "databricksClusterItem.restartKernel",
				"title": "Restart Databricks Cluster Kernel",
				"shortTitle": "Restart Databricks Kernel",
				"category": "Databricks Power Tools"
			},
			{
				"command": "databricksJobs.refresh",
				"title": "Refresh",
				"category": "Databricks Power Tools",
				"icon": "$(refresh)"
			},
			{
				"command": "databricksJobItem.showDefinition",
				"title": "JSON Definition",
				"category": "Databricks Power Tools",
				"icon": "$(json)"
			},
			{
				"command": "databricksJobItem.click",
				"title": "Open File",
				"category": "Databricks Power Tools"
			},
			{
				"command": "databricksJobItem.start",
				"title": "Start",
				"category": "Databricks Power Tools",
				"icon": {
					"light": "resources/light/start.png",
					"dark": "resources/dark/start.png"
				}
			},
			{
				"command": "databricksJobItem.stop",
				"title": "Stop",
				"category": "Databricks Power Tools",
				"icon": {
					"light": "resources/light/stop.png",
					"dark": "resources/dark/stop.png"
				}
			},
			{
				"command": "databricksJobItem.openBrowser",
				"title": "Open Browser",
				"category": "Databricks Power Tools",
				"icon": "$(globe)"
			},
			{
				"command": "databricksFS.addToWorkspace",
				"title": "Add DBFS to VSCode workspace",
				"category": "Databricks Power Tools",
				"icon": "$(symbol-class)"
			},
			{
				"command": "databricksFS.refresh",
				"title": "Refresh",
				"category": "Databricks Power Tools",
				"icon": "$(refresh)"
			},
			{
				"command": "databricksFS.addFile",
				"title": "Add",
				"category": "Databricks Power Tools",
				"icon": "$(new-file)"
			},
			{
				"command": "databricksFS.addDirectory",
				"title": "Add",
				"category": "Databricks Power Tools",
				"icon": "$(file-directory-create)"
			},
			{
				"command": "databricksFSItem.download",
				"title": "Download",
				"category": "Databricks Power Tools",
				"icon": "$(cloud-download)"
			},
			{
				"command": "databricksFSItem.upload",
				"title": "Upload",
				"category": "Databricks Power Tools",
				"icon": "$(cloud-upload)"
			},
			{
				"command": "databricksFSItem.click",
				"title": "Preview File",
				"category": "Databricks Power Tools"
			},
			{
				"command": "databricksFSItem.addFile",
				"title": "Add",
				"category": "Databricks Power Tools",
				"icon": "$(new-file)"
			},
			{
				"command": "databricksFSItem.addDirectory",
				"title": "Add Directory",
				"category": "Databricks Power Tools",
				"icon": "$(file-directory-create)"
			},
			{
				"command": "databricksFSItem.delete",
				"title": "Delete",
				"category": "Databricks Power Tools",
				"icon": "$(remove-close)"
			},
			{
				"command": "databricksFSItem.copyPath",
				"title": "Copy Path",
				"category": "Databricks Power Tools"
			},
			{
				"command": "databricksSecrets.refresh",
				"title": "Refresh",
				"category": "Databricks Power Tools",
				"icon": "$(refresh)"
			},
			{
				"command": "databricksSecrets.addSecretScope",
				"title": "Add Secret Scope",
				"category": "Databricks Power Tools",
				"icon": "$(add)"
			},
			{
				"command": "databricksSecretScope.delete",
				"title": "Delete",
				"category": "Databricks Power Tools",
				"icon": "$(remove-close)"
			},
			{
				"command": "databricksSecretScope.addSecret",
				"title": "Add Secret",
				"category": "Databricks Power Tools",
				"icon": "$(add)"
			},
			{
				"command": "databricksSecret.update",
				"title": "Update",
				"category": "Databricks Power Tools",
				"icon": "$(pencil)"
			},
			{
				"command": "databricksSecret.delete",
				"title": "Delete",
				"category": "Databricks Power Tools",
				"icon": "$(remove-close)"
			},
			{
				"command": "databricksSecret.insertCode",
				"title": "Insert",
				"category": "Databricks Power Tools",
				"icon": "$(code)"
			},
			{
				"command": "databricksSQL.refresh",
				"title": "Refresh",
				"category": "Databricks Power Tools",
				"icon": "$(refresh)"
			},
			{
				"command": "databricksSQLTable.showDefinition",
				"title": "Show Definition",
				"category": "Databricks Power Tools",
				"icon": "$(json)"
			},
			{
				"command": "databricksRepos.refresh",
				"title": "Refresh",
				"category": "Databricks Power Tools",
				"icon": "$(refresh)"
			},
			{
				"command": "databricksRepo.pull",
				"title": "Pull",
				"category": "Databricks Power Tools",
				"icon": "$(repo-pull)"
			},
			{
				"command": "databricksRepo.checkOut",
				"title": "Check-Out",
				"category": "Databricks Power Tools",
				"icon": "$(repo-clone)"
			},
			{
				"command": "databricksRepo.delete",
				"title": "Delete",
				"category": "Databricks Power Tools",
				"icon": "$(remove-close)"
			},
			{
				"command": "databricksKernel.restart",
				"title": "Restart Spark Context",
				"shortTitle": "Restart",
				"icon": "$(debug-restart)",
				"category": "Jupyter"
			},
			{
				"command": "databricksKernel.updateWidgets",
				"title": "Update Widgets",
				"shortTitle": "Widgets",
				"icon": "$(settings)",
				"category": "Jupyter"
			},
			{
				"command": "databricksApi.sendToApi",
				"title": "Send to Databricks API",
				"shortTitle": "Databricks API",
				"icon": {
					"light": "resources/light/databricks_small.png",
					"dark": "resources/dark/databricks_small.png"
				}
			}
		],
		"menus": {
			"view/title": [
				{
					"command": "databricksConnections.refresh",
					"when": "view == databricksConnections",
					"group": "navigation"
				},
				{
					"command": "databricksConnections.add",
					"when": "view == databricksConnections && virtualWorkspace",
					"group": "navigation"
				},
				{
					"command": "databricksConnections.settings",
					"when": "view == databricksConnections && !virtualWorkspace",
					"group": "navigation"
				},
				{
					"command": "databricksWorkspace.refresh",
					"when": "view == databricksWorkspace",
					"group": "navigation@2"
				},
				{
					"command": "databricksWorkspace.download",
					"when": "view == databricksWorkspace",
					"group": "navigation@1"
				},
				{
					"command": "databricksWorkspace.upload",
					"when": "view == databricksWorkspace",
					"group": "navigation@1"
				},
				{
					"command": "databricksWorkspace.addToWorkspace",
					"when": "view == databricksWorkspace",
					"group": "navigation"
				},
				{
					"command": "databricksClusters.refresh",
					"when": "view == databricksClusters",
					"group": "navigation"
				},
				{
					"command": "databricksClusters.add",
					"when": "view == databricksClusters",
					"group": "navigation"
				},
				{
					"command": "databricksJobs.refresh",
					"when": "view == databricksJobs",
					"group": "navigation"
				},
				{
					"command": "databricksFS.refresh",
					"when": "view == databricksFS",
					"group": "navigation"
				},
				{
					"command": "databricksFS.addFile",
					"when": "view == databricksFS",
					"group": "navigation"
				},
				{
					"command": "databricksFS.addDirectory",
					"when": "view == databricksFS",
					"group": "navigation"
				},
				{
					"command": "databricksFS.addToWorkspace",
					"when": "view == databricksFS",
					"group": "navigation"
				},
				{
					"command": "databricksSecrets.refresh",
					"when": "view == databricksSecrets",
					"group": "navigation"
				},
				{
					"command": "databricksSecrets.addSecretScope",
					"when": "view == databricksSecrets",
					"group": "navigation"
				},
				{
					"command": "databricksSQL.refresh",
					"when": "view == databricksSQL",
					"group": "navigation"
				},
				{
					"command": "databricksRepos.refresh",
					"when": "view == databricksRepos",
					"group": "navigation"
				}
			],
			"view/item/context": [
				{
					"command": "databricksConnectionItem.activate",
					"when": "view == databricksConnections && viewItem == INACTIVE",
					"group": "inline"
				},
				{
					"command": "databricksWorkspaceItem.download",
					"when": "view == databricksWorkspace && viewItem =~ /.*,DOWNLOAD,.*/",
					"group": "inline@1"
				},
				{
					"command": "databricksWorkspaceItem.upload",
					"when": "view == databricksWorkspace && viewItem =~ /.*,UPLOAD,.*/",
					"group": "inline@1"
				},
				{
					"command": "databricksWorkspaceItem.compare",
					"when": "view == databricksWorkspace && viewItem =~ /.*,COMPARE,.*/",
					"group": "inline@1"
				},
				{
					"command": "databricksWorkspaceItem.delete",
					"when": "view == databricksWorkspace",
					"group": "inline@99"
				},
				{
					"command": "databricksWorkspaceItem.copyPath",
					"when": "view == databricksWorkspace"
				},
				{
					"command": "databricksWorkspaceItem.openExplorer",
					"when": "view == databricksWorkspace && viewItem =~ /.*,OPENEXPLORER,.*/"
				},
				{
					"command": "databricksClusterItem.start",
					"when": "view == databricksClusters && viewItem =~ /.*,STOPPED,.*/ && viewItem =~ /.*,MANUAL,.*/",
					"group": "inline"
				},
				{
					"command": "databricksClusterItem.stop",
					"when": "view == databricksClusters && viewItem =~ /.*,STARTED,.*/ && viewItem =~ /.*,MANUAL,.*/",
					"group": "inline"
				},
				{
					"command": "databricksClusterItem.showDefinition",
					"when": "view == databricksClusters && viewItem =~ /.*,SHOW_DEFINITION,.*/",
					"group": "inline"
				},
				{
					"command": "databricksClusterItem.delete",
					"when": "view == databricksClusters && viewItem =~ /.*,MANUAL,.*/",
					"group": "inline@99"
				},
				{
					"command": "databricksClusterItem.pin",
					"when": "view == databricksClusters && viewItem =~ /.*,NOT_PINNED,.*/ && viewItem =~ /.*,MANUAL,.*/",
					"group": "inline"
				},
				{
					"command": "databricksClusterItem.unpin",
					"when": "view == databricksClusters && viewItem =~ /.*,PINNED,.*/ && viewItem =~ /.*,MANUAL,.*/",
					"group": "inline"
				},
				{
					"command": "databricksClusterItem.useForSQL",
					"when": "view == databricksClusters && viewItem =~ /.*,STARTED,.*/ && viewItem =~ /.*,MANUAL,.*/ && paiqo.databricks.connectionManager != 'Databricks Extension'"
				},
				{
					"command": "databricksClusterItem.attachCluster",
					"when": "view == databricksClusters && viewItem =~ /.*,MANUAL,.*/ && paiqo.databricks.connectionManager == 'Databricks Extension'",
					"group": "inline"
				},
				{
					"command": "databricksClusterItem.createKernel",
					"when": "view == databricksClusters && viewItem =~ /.*,STARTED,.*/ && viewItem =~ /.*,NOKERNEL,.*/ && viewItem =~ /.*,MANUAL,.*/"
				},
				{
					"command": "databricksClusterItem.restartKernel",
					"when": "view == databricksClusters && viewItem =~ /.*,STARTED,.*/ && viewItem =~ /.*,KERNEL,.*/"
				},
				{
					"command": "databricksJobItem.showDefinition",
					"when": "view == databricksJobs && viewItem == JOB || viewItem == JOB_RUN || viewItem == RUNNING_JOB",
					"group": "inline"
				},
				{
					"command": "databricksJobItem.start",
					"when": "view == databricksJobs  && viewItem == JOB",
					"group": "inline"
				},
				{
					"command": "databricksJobItem.stop",
					"when": "view == databricksJobs  && viewItem == RUNNING_JOB",
					"group": "inline"
				},
				{
					"command": "databricksJobItem.openBrowser",
					"when": "view == databricksJobs && viewItem == JOB || viewItem == JOB_RUN || viewItem == RUNNING_JOB",
					"group": "inline"
				},
				{
					"command": "databricksFSItem.addFile",
					"when": "view == databricksFS && viewItem =~ /.*,ADDFILE,.*/",
					"group": "inline"
				},
				{
					"command": "databricksFSItem.addDirectory",
					"when": "view == databricksFS && viewItem =~ /.*,ADDDIRECTORY,.*/",
					"group": "inline"
				},
				{
					"command": "databricksFSItem.download",
					"when": "view == databricksFS && viewItem =~ /.*,DOWNLOAD,.*/",
					"group": "inline"
				},
				{
					"command": "databricksFSItem.upload",
					"when": "view == databricksFS && viewItem =~ /.*,UPLOAD,.*/",
					"group": "inline"
				},
				{
					"command": "databricksFSItem.delete",
					"when": "view == databricksFS &&  viewItem =~ /.*,DELETE,.*/",
					"group": "inline@99"
				},
				{
					"command": "databricksFSItem.copyPath",
					"when": "view == databricksFS"
				},
				{
					"command": "databricksSecretScope.delete",
					"when": "view == databricksSecrets && viewItem == SCOPE_DATABRICKS",
					"group": "inline@99"
				},
				{
					"command": "databricksSecretScope.addSecret",
					"when": "view == databricksSecrets && viewItem == SCOPE_DATABRICKS",
					"group": "inline"
				},
				{
					"command": "databricksSecret.update",
					"when": "view == databricksSecrets && viewItem == SECRET_DATABRICKS",
					"group": "inline"
				},
				{
					"command": "databricksSecret.delete",
					"when": "view == databricksSecrets && viewItem == SECRET_DATABRICKS",
					"group": "inline@99"
				},
				{
					"command": "databricksSecret.insertCode",
					"when": "view == databricksSecrets && viewItem =~ /^SECRET_.*/",
					"group": "inline@90"
				},
				{
					"command": "databricksSQL.refresh",
					"when": "view == databricksSQL && viewItem == DATABASE",
					"group": "inline"
				},
				{
					"command": "databricksSQLTable.showDefinition",
					"when": "view == databricksSQL && viewItem == TABLE",
					"group": "inline"
				},
				{
					"command": "databricksRepo.pull",
					"when": "view == databricksRepos && viewItem == REPOSITORY",
					"group": "inline@1"
				},
				{
					"command": "databricksRepo.checkOut",
					"when": "view == databricksRepos && viewItem == REPOSITORY",
					"group": "inline@2"
				},
				{
					"command": "databricksRepo.delete",
					"when": "view == databricksRepos && viewItem == REPOSITORY",
					"group": "inline@99"
				}
			],
			"notebook/toolbar": [
				{
					"command": "databricksKernel.restart",
					"group": "navigation/execute@1",
					"when": "notebookKernel =~ /^paiqo.databricks-vscode\\// && notebookType == 'jupyter-notebook' && isWorkspaceTrusted"
				},
				{
					"command": "databricksKernel.updateWidgets",
					"group": "navigation/execute@1",
					"when": "notebookKernel =~ /^paiqo.databricks-vscode\\// && notebookType == 'jupyter-notebook' && isWorkspaceTrusted"
				}
			],
			"editor/title": [
				{
					"command": "databricksKernel.restart",
					"group": "navigation@1",
					"when": "notebookKernel =~ /^paiqo.databricks-vscode\\// && notebookType == 'jupyter-notebook' && isWorkspaceTrusted"
				}
			],
			"editor/title/run": [
				{
					"command": "databricksApi.sendToApi",
					"when": "resourceExtname == .json || resourceExtname == ''"
				}
			]
		},
		"notebooks": [
			{
				"type": "databricks-notebook",
				"displayName": "Databricks Notebook",
				"selector": [
					{
						"filenamePattern": "..some.invalid.pattern.."
					}
				],
				"priority": "default"
			}
		]
	},
	"scripts": {
		"vscode:prepublish": "npm run package",
		"compile": "webpack",
		"watch": "webpack --watch",
		"package": "webpack --mode production --devtool hidden-source-map",
		"lint": "eslint src --ext ts",
		"test": "vscode-test-web --extensionDevelopmentPath=. --extensionTestsPath=dist/web/extension.js"
	},
	"devDependencies": {
		"@types/glob": "^7.2.0",
		"@types/mocha": "^9.1.1",
		"@types/node": "^16.11.7",
		"@types/rimraf": "^2.0.5",
		"@types/vscode": "^1.68.0",
		"@vscode/vsce": "^2.19.0",
		"@vscode/test-web": "*",
		"eslint": "^8.19.0",
		"glob": "^8.0.3",
		"mocha": "^10.0.0",
		"native-ext-loader": "^2.3.0",
		"node-fetch": "^3.2.10",
		"path-browserify": "^1.0.1",
		"process": "^0.11.10",
		"ts-loader": "^9.3.1",
		"typescript": "^4.7.4",
		"webpack": "^5.76.0",
		"webpack-cli": "^4.10.0",
		"buffer": "^6.0.3"
	}
}